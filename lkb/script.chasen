;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: LKB -*-

;;;
;;; This script file uses the defaults we prefer to use for 
;;; treebanking in the Hinoki project:
;;;   ChaSen off (assuming presegmented input), 
;;;   precise analysis on (load the ambiguous files). 
;;;

(setf *features* (remove :chasen *features*))
(pushnew :chasen *features*)

(lkb-load-lisp (parent-directory) "Version.lsp")
(setf *grammar-directory* (parent-directory)) ; needed for MRS
(load-lkb-preferences (this-directory) "user-prefs.lsp")
(lkb-load-lisp (this-directory) "globals.lsp")
(lkb-load-lisp (this-directory) "user-fns.lsp")

(lkb-load-lisp (this-directory) "checkpaths.lsp" t)

;;; load some patches (;o;)
(lkb-load-lisp (this-directory) "patches.lsp" t)


(lkb-load-lisp (this-directory) "mrsglobals.lsp")

(read-tdl-type-files-aux
     (list (lkb-pathname (parent-directory) "tdl-built-ins.tdl")
              (lkb-pathname (parent-directory) "matrix.tdl")
              (lkb-pathname (parent-directory) "mrsbasic.tdl")
              (lkb-pathname (parent-directory) "newlexsem-types.tdl")
              (lkb-pathname (parent-directory) "values.tdl")
              (lkb-pathname (parent-directory) "fundamentals.tdl")
              (lkb-pathname (parent-directory) "rule-types.tdl")
              (lkb-pathname (parent-directory) "principles.tdl")
              (lkb-pathname (parent-directory) "lex-types.tdl")
              (lkb-pathname (parent-directory) "v-lex-types.tdl")
	      (lkb-pathname (parent-directory) "mtr.tdl") 
))

(lkb-load-lisp (this-directory) "mrs-initialization.lsp" t)

(read-morph-file-aux (lkb-pathname (parent-directory) "infl.tdl"))
(load-irregular-spellings 
 (list
  (lkb-pathname (parent-directory) "irregs.tab")))

(read-tdl-grammar-file-aux  (lkb-pathname (parent-directory) "japgram.tdl"))
(read-tdl-grammar-file-aux  (lkb-pathname (parent-directory) "ambiguous-rules.tdl"))

;;; Load the lexicon
(if  nil ;  *lexdb-params* ;;; nil
    ;; Use the database
    (progn
      ;; load from database
      (load-lexdb-from-script)
      ;; load the things that aren't in the database
      (read-cached-sublex-if-available 
       "lexicon" (list (lkb-pathname (parent-directory) "lex/Jacy.main.skip")))
      ;;; load the generic lexical types
      (read-cached-sublex-if-available 
       "generics" (list (lkb-pathname (parent-directory) "lex/generics.tdl"))))
  (progn
    (read-cached-lex-if-available (list
				   (lkb-pathname (parent-directory) 
						 "lex/generics.tdl"))) 
    ;; pick an arbitrary file and call it the _main_ lexicon
    (read-cached-sublex-if-available 
     "adjadv-lex" (list  (lkb-pathname 
			  (parent-directory) "lex/adjadv-lex.tdl")))
    (read-cached-sublex-if-available
     "aux-stem-lex" (list (lkb-pathname 
			   (parent-directory) "lex/aux-stem-lex.tdl")))
    (read-cached-sublex-if-available
     "funct-lex" (list  (lkb-pathname 
			 (parent-directory) "lex/funct-lex.tdl")))
    (read-cached-sublex-if-available
     "idiom-lex" (list  (lkb-pathname 
			 (parent-directory) "lex/idiom-lex.tdl")))
    (read-cached-sublex-if-available
     "light-verbs-lex" (list (lkb-pathname 
			      (parent-directory) "lex/light-verbs-lex.tdl")))
    (read-cached-sublex-if-available
     "noun-lex" (list (lkb-pathname 
		       (parent-directory) "lex/noun-lex.tdl")))
    (read-cached-sublex-if-available
     "numbers-lex" (list (lkb-pathname 
			  (parent-directory) "lex/numbers-lex.tdl")))
    (read-cached-sublex-if-available
     "p-lex" (list (lkb-pathname 
		    (parent-directory) "lex/p-lex.tdl")))
    (read-cached-sublex-if-available
     "pn-lex" (list  (lkb-pathname 
		      (parent-directory) "lex/pn-lex.tdl")))
    (read-cached-sublex-if-available
     "verbstem-lex" (list (lkb-pathname 
			   (parent-directory) "lex/verbstem-lex.tdl")))
    (read-cached-sublex-if-available
     "vn-lex" (list (lkb-pathname 
		     (parent-directory) "lex/vn-lex.tdl")))
    (read-cached-sublex-if-available
     "v-ends-lex" (list (lkb-pathname 
			 (parent-directory) "lex/v-ends-lex.tdl")))
    (read-cached-sublex-if-available 
     "ambiguous-lex" (list (lkb-pathname (parent-directory) 
				       "lex/ambiguous-lex.tdl")))
    (read-cached-sublex-if-available 
     "kyoudai-all" (list (lkb-pathname (parent-directory) 
				       "lex/kyoudai-all.tdl")))
    (read-cached-sublex-if-available
     "ersatz" (list (lkb-pathname (parent-directory)
				  "lex/ersatz.tdl")))))


(read-tdl-parse-node-file-aux 
          (lkb-pathname (parent-directory) "parse-nodes.tdl"))

;(read-tdl-psort-file-aux 
(read-tdl-start-file-aux 
          (lkb-pathname (parent-directory) "roots.tdl"))

;#+unknown-words
;(lkb-load-lisp "/project/cl/yy/lkb/src/unknown-words/" "grammar-jacy.lisp")

;;;
;;; if the preprocessor code is loaded (which it is by default), load the 
;;; finite-state rules; these get applied in our preprocess-sentence-string().
;;;
;#+:preprocessor
;(read-preprocessor (lkb-pathname (parent-directory) "preprocessor.fsr"))

;;;
;;; when loaded into an environment including [incr tsdb()] and the Redwoods
;;; tools, also load a Maximum Entropy parse selection model
;;;
#+:tsdb
(tsdb::read-mem (lkb-pathname (parent-directory) "f5-005.mem"))


;;;
;;; finally, use the new transfer component: load any number of rule sets, each
;;; in a separate file, associated with its identifier.  
;;;
#+:mt
(lkb-load-lisp (this-directory) "mt.lsp" t)
;;; trigger rules for generation
#+:mt
(mt:read-transfer-rules 
 (list
  (lkb-pathname (parent-directory) "trigger.mtr"))
 "Generator Triggger Rules"
 :filter nil :task :trigger :recurse nil :subsume nil)
;;; transfer rules for paraphrasing
#+:mt
(mt:read-transfer-rules 
 (list
  (lkb-pathname (parent-directory) "paraphraser.mtr"))
 "JaJa Paraphraser"
 :filter nil :task :paraphrase)
