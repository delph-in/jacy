;;;The ACE configuration file uses a TDL-like syntax; comments start with semicolons, and each other line looks like:
;;;
;;;"parameter := value."
;;;
;;;The format of the "value" field varies depending on the parameter.
;;;
;;;Values that are filesystem paths are always in double quotes and are relative to the location of the configuration file.

;;;Paths to other files:

;;;|| version || path to a text file containing the grammar version within double quotes ||

version                   := "../Version.lsp".

;;;|| grammar-top || path to a TDL file that includes the rest of the grammar ||

grammar-top               := "../japanese.tdl".

;;; experimental rules to negate sentences
;generation-fixup-rules    := "../gen-fixup.mtr".

;;;|| preprocessor || path to a .rpp file defining the REPP ||

preprocessor              := "../rpp/tokenizer.rpp".

;;;|| preprocessor-modules || list of ''unquoted'' paths to REPP modules to enable ||

preprocessor-modules      := ../rpp/lkb.rpp.

;;;|| maxent-model || path to a .mem file for ranking ||

maxent-model              := "../tc.mem".

;;;|| variable-property-mapping || path to the VPM definition ||

variable-property-mapping := "../semi.vpm".

;;;|| parse-node-labels || path to a TDL file defining parse node labels (unused) ||

parse-node-labels := "../labels.tdl".
label-path := LABEL-NAME.

;;;|| generation-ignore-signs || path to a file listing rule and lexeme names to disable for generation ||

;generation-ignore-signs   := "generation.ignore".

;;;|| generation-ignore-lexemes || path to a file listing more lexeme names to disable for generation ||
generation-ignore-lexemes := "../lkb/nogen-lex.set".

generation-ignore-rules   := "../lkb/nogen-rules.set".

;;;|| generation-ignore-rules || path to a file listing more rule names to disable for generation ||

;;;|| generation-trigger-rules || path to a TDL file defining trigger rules for generation ||

generation-trigger-rules  := "../trigger.mtr".

;;;|| idiom-rules || path to a TDL file defining idiom-checking rules for parsing ||

;;;|| quickcheck-code || path to a text file defining the quickcheck skeleton ||

quickcheck-instance := qc_unif_set_pack.

;;;|| semantic-interface || path to a .smi file defining the SEMI ||

;;;Types

;;;|| top-type || name of the type at the root of the type hierarchy ||

;;;|| semarg-type || supertype of MRS variables ||

semarg-type               := semarg.

;;;|| handle-type || type for MRS handles and holes ||

;;;|| list-type || type for lists ||

list-type                 := list.

;;;|| cons-type || type for non-empty lists ||

cons-type                 := cons.

;;;|| null-type || type for empty lists ||

null-type                 := null.

;;;|| diff-list-type || type for diff-lists ||

diff-list-type            := diff-list.

;;;|| semantic-interface-top-type || the name of the type at the top of the SEMI type hierarchy ||

;;;Paths within AVMs

;;;|| orth-path || path to orthography list within a sign ||

orth-path                 := STEM.

;;;|| lex-rels-path || path to list of EPs supplied by a lexeme ||

lex-rels-path             := SYNSEM LOCAL CONT RELS.

;;;|| lex-carg-path || path to CARG of a lexeme's key relation (old, unused) ||

lex-carg-path             := SYNSEM LKEYS KEYREL CARG.

;;;|| lex-pred-path || path to PRED of a lexeme's key relation (old, unused) ||

lex-pred-path             := SYNSEM LKEYS KEYREL PRED.

;;;|| rule-rels-path || path to list of EPs supplied by a rule ||

rule-rels-path            := C-CONT RELS.

;;;|| semantics-path || path to the MRS structure of a sign ||

semantics-path            := SYNSEM LOCAL CONT.

;;;|| chart-dependencies || a (flat) list of pairs of quoted paths used for removing unwanted lexemes from the chart before parsing.  a lexeme with a non-*top* value for the first path in a pair will only survive if there is another lexeme with a compatible value at the second path in the pair. ||

;;;Token Mapping

;;;|| token-mapping || enabled (normal) or disabled (legacy; not well supported) ||
;;;|| token-type || type of a token feature structure ||
;;;|| lexicon-tokens-path || path to the list of tokens that license a lexeme ||
;;;|| lexicon-tokens-last-path || path to the LAST pointer for the diff-list-like token list ||
;;;|| token-form-path || path within a token to the surface form string ||
;;;|| token-from-path || path within a token to the CFROM (character start position) field ||
;;;|| token-to-path   || path within a token to the CTO (character end position) field ||
;;;|| token-id-path   || path within a token to the ID ||
;;;|| token-postags-path   || path within a token to the POS tag list ||
;;;|| token-posprobs-path  || path within a token to the POS tag probability list ||
;; token settings
token-mapping := enabled.

lexicon-tokens-path := TOKENS +LIST.
lexicon-last-token-path := TOKENS +LAST.
token-type			:= token.
token-form-path     := +FORM.       ; [required] string for lexical lookup
token-id-path       := +ID.         ; [optional] list of external ids
token-from-path     := +FROM.       ; [optional] surface start position
token-to-path       := +TO.         ; [optional] surface end position
token-postags-path  := +POS +TAGS.  ; [optional] list of POS tags
token-posprobs-path := +POS +PRBS.  ; [optional] list of POS probabilities


;;;|| lattice-mapping-input-path || path within a lattice mapping rule to the input list ||
;;;|| lattice-mapping-output-path || path within a lattice mapping rule to the output list ||
;;;|| lattice-mapping-context-path || path within a lattice mapping rule to the context list ||
;;;|| lattice-mapping-position-path || path within a lattice mapping rule to the positional constraints ||
;; lattice mapping settings
lattice-mapping-input-path := +INPUT.
lattice-mapping-output-path := +OUTPUT.
lattice-mapping-context-path := +CONTEXT.
lattice-mapping-position-path := +POSITION.


:begin :type.
:include "../mtr".
:end :type.



;invent-ltop: TRUE.

;;;Miscellaneous Switches

;;;|| index-accessibility-filtering || enabled or disabled.  this significantly reduces generation time, but if important references to MRS variables are on the packing restrictor then it can cause generation to fail. ||

;;;|| generalize-edge-top-types || enabled or disabled.  sets the top-level type of all passive edges to ''sign'', which results in significantly increased packing with some grammars.  may or may not be a net win, considering additional failures in unpacking. ||

;;;|| english-pos-tagger || enabled or disbled.  runs the input through a built-in trigram HMM tagger (but you need to supply the training data) and records the results in the token structures. ||

;;;|| simplify-lexicon || enabled or disabled.  ERG-specific; attempts to represent the lexicon more compactly. ||

;;;|| extra-erg-dag-stash || enabled or disabled.  ERG-specific; keeps extra copies of some common GLB types DAGs on hand. ||

;;;|| process-chart-dependencies-before-lexical-parsing || enabled or disabled.  when enabled, chart reduction happens before lexical parsing (default is after lexical parsing). ||

;;;General Configuration

;;;|| spanning-only-rules || list of rules to only allow in the spanning chart cell ||

spanning-only-rules := frg-np frg-pp frg-s-adv frg-i-adv frg-pp-np frg-i-adv-np frg-pp-int runon_s.

;;;|| fragment-only-rules || list of rules to only allow when fragment parsing is enabled ||

;xfragment-only-rules := 
;  frag_nocop_s frag_np frag_nbar frag_pp_i frag_pp_sl
;  frag_adj frag_int_adv frag_cl_adv frag_vp frag_vp_sl 
;  frag_l_mod_np frag_l_mod_pp frag_l_mod_adv frag_l_mod_vp frag_r_mod_np 
;  frag_r_mod_i_pp frag_r_mod_i_pp frag_r_mod_s_pp frag_r_mod_ap.

;;;|| hyper-active-rules || list of rules for which hyperactive parsing should be used ||

;hyper-active-rules := 
;  adv_coord_mid freerel_inf num_seq np_city_state adv_coord_top np_n_cmpnd_2
;  measure_np hspechc fillhead_wh_nr_i adj_pred_coord_top adj_pred_coord_mid
;  fillhead_wh_r frag_l_mod_vp np_n_cmpnd frag_r_mod_np adj_attr_coord_top
;  frag_l_mod_adv frag_l_mod_pp frag_r_mod_s_pp frag_l_mod_np np_name_cmpnd
;  adj_attr_coord_mid hspec hmarkatom noun_n_cmpnd meas_np_symb frag_r_mod_i_pp
;  fillhead_rel n_ttl_cmpnd nadj_rc_pr nadj_rc fillhead_wh_nr_f 
;  v_coord_nonfin_top p_coord_top appos_npr adjh_i_ques compl_int_phr
;  frag_r_mod_ap v_coord_nonfin_mid adj_adjn p_coord_mid fillhead_non_wh.

;;;|| deleted-daughters || list of features to delete on new passive edges ||

deleted-daughters :=  ARGS HEAD-DTR NON-HEAD-DTR DTR.

;;;|| parsing-packing-restrictor || list of features to suppress until unpacking while parsing ||

parsing-packing-restrictor := 
  ORTH RELS HCONS.

;;;|| generation-packing-restrictor || list of features to suppress until unpacking while generating ||

generation-packing-restrictor := 
  ORTH RELS HCONS.

;;;|| mrs-deleted-roles || list of features on internal MRS variable AVMs that should not be exported when presenting final MRSes (superceded by VPM?) ||

mrs-deleted-roles :=  IDIOMP WLINK CTO CFROM LNK PARAMS.

;;;|| parsing-roots || list of root instances enabled for parsing ||

parsing-roots             := utterance-root.

;;;|| generation-roots || list of root instances enabled for generation ||

generation-roots          := utterance-root.

;;;|| non-idiom-root || the name of an instance to check against all parsing results to see whether further idiom processing is required ||

;;;|| generic-les-for-semantic-index || list of the names of the generic lexemes that can be used to provide an unknown relation in generation ||

:begin :instance.
:include "../pet/qc".
:end :instance.

:begin :type.
:include "../mtr".
:end :type.
