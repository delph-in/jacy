;;;; settings for CHEAP -*- Mode: TDL; Coding: utf-8 -*-

encoding := utf-8.

;; allow lexical entries to fail
lex-entries-can-fail.

;;; FIXME
;;; some of the English `l2global' settings turn out to be grammar-specific;
;;; until we can fix that in the English grammar, duplicate some parameters
;;; here.                                                  (14-sep-01; oe)
;;;
include "mrs".


;; command line settings
verbose := 10.
limit := 10000.
memlimit := 32.
hyper := true.
one-solution := false.
one-meaning := true.
default-les := true.
yy := true.
k2y := 1.

include "shared".

;; status values that marks rules
rule-status-values := rule.
lexrule-status-values := lex-rule.

;; status values that marks lexicon entries
;; lexentry-status-values := lex-entry generic-lex-entry. 
lexentry-status-values := lex-entry. 

;;
;; input preprocessing: disable downcasing and (English-specific) explosion of
;; apostrophes.  include double-byte punctuation characters.
;;
trivial-tokenizer.

;; (ERB 2001-12-20) We don't want to strip : anymore, since it's
;; being used meaningfully.


punctuation-characters := "!\"!&'()*+,-−./;<=>?@[\]^_`{|}~。！？…．　○●◎＊☆★◇◆".
;"

;; name of type to get info about grammar into (if at all)
grammar-info := grammar_info.

;; type of a valid parse, spoken and email language
;;start-symbols := $utterance-root $np-frag-root $pp-frag-root.
start-symbols := $utterance-root.

;; type of a valid parse, written language
;start-symbols := $utterance-root.

;; name of type containing quick check structure
;qc-structure := $qc_unif_set.
;qc-structure := $qc_paths_set.
qc-structure := $qc_unif_set_pack.

;; names of attributes not to pass from daughter to mother in parsing
deleted-daughters := ARGS HEAD-DTR NON-HEAD-DTR.

;;
;; names of attributes to filter for packing parser
;;
packing-restrictor := RELS HCONS.

;; prefix of list-valued path where to unify the affix
affixation-path := "ARGS.FIRST".

;; path to the list of arguments in a rule
rule-args-path := ARGS.

;; path to marker for key argument of a rule
keyarg-marker-path := KEY-ARG.

;; path to marker for head dtr of a rule
head-dtr-path := HEAD-DTR.

;; assoc (rules -> keyarg position) (alternative to KEY-ARG mechanism)
rule-keyargs := 
$HEAD-ADJUNCT-RULE1 1 
$HEAD-ADJUNCT-RULE2 2 
$HEAD-ADJUNCT-RULE3 1 
$RELATIVE-CLAUSE-RULE 1 
$COMPOUNDS-RULE 1 
$SENTENCE-TE-COORDINATION-RULE 1
$CONJ-RULE 1
$KARA-MADE-RULE 2 
$HEAD_SUBJ_RULE 2 
$HEAD-SPECIFIER-RULE 2 
$HEAD-COMPLEMENT-HF-RULE 2 
$HEAD-COMPLEMENT-HI-RULE 1 
$HEAD-COMPLEMENT-AFFIXBIND-RULE 2
$HEAD-COMPLEMENT2-RULE 2 
$HEAD-2OBL-COMPLEMENTS-RULE 2
$VN-LIGHT-RULE 2
$VEND-VEND-RULE 1
$VSTEM-VEND-RULE 2 
$VN-VEND-RULE 2
$PREFIX-ATTACH-RULE 1
$NP-QUEST-FRAG-RULE 2.

;; path to orthography
orth-path := "STEM".

;; type to mark boolean value `true'
true-type := plus.

;; path into the MRS semantics
mrs-path := "SYNSEM.LOCAL.CONT".

; maximum depth for chaining morphological rules
orthographemics-maximum-chain-depth := 3.
; minimum stem length to apply morphological rules
;;; this is useless because ChaSen adds RU to verb stems.
orthographemics-minimum-stem-length := 1.
; don't apply the same rule twice to the same lexeme
orthographemics-duplicate-filter:= false.
;; only allow cohesive chains (whatever they may be)
;orthographemics-cohesive-chains:= true.


;;;
;;; scoring model
;;;

sm := "tc.mem".

;;; Notes:
;;; 
;;; Go only as low as necessary to get sthg to work.
;;;
;;; All inflectional rules are set to 0 so that they take
;;; on the original word's priority, unless there is specific
;;; reason to do otherwise.
;;;

spanning-only-rules := $frg-np $frg-pp $frg-s-adv $frg-i-adv
		       $frg-pp-np $frg-i-adv-np $frg-pp-int 
		       $runon_s.

;;; generic lexical entries for unknown words: for each unknown word in the
;;; input all generic entries are postulated.  those that require a certain
;;; suffix (`generic-le-suffixes') only fire if the input form has the suffix.
;;; scoring for generic items is based on the default priority (typically 
;;; fairly low) and (optionally) adjusted on the basis of POS information that
;;; may be available for the unknown word.  if the input word has one more more
;;; POS tags associated to it, these are looked up in the `posmapping' table:
;;; this table is a list of triples (tag, score, gle) where `gle' is the name
;;; of one of the generic items in `generic-les'.  for each generic item, the
;;; score is adjusted to the first match of one of the tags associated with the
;;; unknown word in the mapping table.
;;;

generic-lexentry-status-values := generic-lex-entry.


;;;
;;; as of august 2003, PET includes ECL and the generic (R)MRS code; hence, we
;;; need to include the MRS settings from the grammar.
;;;
postload-lisp-files := "lkb/mrsglobals.lsp".


;;; load the vpm file
vpm := "semi".

;;;
;;; following are a number of settings for the new (as of late 2008) token
;;; mapping and lexical filtering support in PET.
;;;

;;
;; first, the general format of chart mapping rules, much like MRS transfer.
;;
chart-mapping-context-path  := "+CONTEXT".
chart-mapping-input-path    := "+INPUT".
chart-mapping-output-path   := "+OUTPUT".
chart-mapping-position-path := "+POSITION".
;;
;; in lexical instatiation, the list of tokens activating a lexical entry (be
;; it native or generic) are unified into the lexical entry under this path.
;;

lexicon-tokens-path := "TOKENS.+LIST".
lexicon-last-token-path := "TOKENS.+LAST".

;;
;; furthermore, for the various input formats, we need to declare how parts of
;; input descriptions correspond to the grammar-internal feature geometry; in
;; the YY input format, for example, token feature structures (aka input items
;; PET-internally) are created from various parts of the token description.
;; 
token-form-path     := "+FORM".       ; [required] string for lexical lookup
token-id-path       := "+ID".         ; [optional] list of external ids
token-from-path     := "+FROM".       ; [optional] surface start position
token-to-path       := "+TO".         ; [optional] surface end position
token-postags-path  := "+POS.+TAGS".  ; [optional] list of POS tags
token-posprobs-path := "+POS.+PRBS".  ; [optional] list of POS probabilities
;;
;; finally, declare TDL status values for the various new entity types
;;
generic-lexentry-status-values := generic-lex-entry.
token-mapping-rule-status-values := token-mapping-rule.
lexical-filtering-rule-status-values := lexical-filtering-rule.

